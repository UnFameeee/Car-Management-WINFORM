<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>